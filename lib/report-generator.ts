import html2canvas from "html2canvas"
import jsPDF from "jspdf"
import type { SkinAnalysisData } from "@/types/skin-analysis"

/**
 * Generates and downloads a PDF report from the analysis data and heatmap
 * @param {SkinAnalysisData} analysisData - The skin analysis data
 * @param {HTMLElement} heatmapElement - The DOM element containing the heatmap
 * @param {string} imageUrl - The original image URL
 * @param {string} userName - The user's name
 */
export async function generateReport(
  analysisData: SkinAnalysisData,
  heatmapElement: HTMLElement,
  imageUrl: string,
  userName = "User",
): Promise<void> {
  try {
    // Create a new PDF document
    const pdf = new jsPDF("p", "mm", "a4")
    const pageWidth = pdf.internal.pageSize.getWidth()
    const pageHeight = pdf.internal.pageSize.getHeight()

    // Add header
    pdf.setFontSize(22)
    pdf.setTextColor(217, 154, 65) // Primary color
    pdf.text("Skin Analysis Report", pageWidth / 2, 20, { align: "center" })

    // Add date and user info
    pdf.setFontSize(12)
    pdf.setTextColor(97, 110, 124) // Secondary color
    const date = new Date().toLocaleDateString()
    pdf.text(`Generated on: ${date}`, pageWidth / 2, 30, { align: "center" })
    pdf.text(`Prepared for: ${userName}`, pageWidth / 2, 38, { align: "center" })

    // Add heatmap image
    const canvas = await html2canvas(heatmapElement)
    const imgData = canvas.toDataURL("image/png")

    // Calculate image dimensions to fit the page while maintaining aspect ratio
    const imgWidth = pageWidth - 40 // 20mm margin on each side
    const imgHeight = (canvas.height * imgWidth) / canvas.width

    pdf.addImage(imgData, "PNG", 20, 45, imgWidth, imgHeight)

    // Move cursor below the image
    let yPosition = 45 + imgHeight + 10

    // Add overall score
    pdf.setFontSize(16)
    pdf.setTextColor(31, 41, 51) // Dark text
    pdf.text("Overall Skin Health Score", 20, yPosition)

    pdf.setFontSize(24)
    pdf.setTextColor(217, 154, 65) // Primary color
    pdf.text(`${analysisData.overallScore}%`, pageWidth - 20, yPosition, { align: "right" })

    yPosition += 15

    // Add skin type
    pdf.setFontSize(16)
    pdf.setTextColor(31, 41, 51) // Dark text
    pdf.text("Skin Type", 20, yPosition)

    pdf.setFontSize(16)
    pdf.setTextColor(217, 154, 65) // Primary color
    pdf.text(analysisData.skinType, pageWidth - 20, yPosition, { align: "right" })

    yPosition += 15

    // Add concerns
    pdf.setFontSize(16)
    pdf.setTextColor(31, 41, 51) // Dark text
    pdf.text("Skin Concerns", 20, yPosition)

    yPosition += 10

    // Check if we need a new page
    if (yPosition + analysisData.concerns.length * 10 > pageHeight - 20) {
      pdf.addPage()
      yPosition = 20
    }

    // Add each concern
    analysisData.concerns.forEach((concern) => {
      pdf.setFontSize(14)
      pdf.setTextColor(31, 41, 51) // Dark text
      pdf.text(concern.name, 25, yPosition)

      pdf.setFontSize(14)
      pdf.setTextColor(217, 154, 65) // Primary color
      pdf.text(`${Math.round(concern.severity * 100)}%`, 100, yPosition)

      // Truncate description if too long
      const description =
        concern.description.length > 50 ? concern.description.substring(0, 50) + "..." : concern.description

      pdf.setFontSize(12)
      pdf.setTextColor(97, 110, 124) // Secondary color
      pdf.text(description, 120, yPosition)

      yPosition += 10
    })

    yPosition += 10

    // Check if we need a new page
    if (yPosition + analysisData.recommendations.length * 15 > pageHeight - 20) {
      pdf.addPage()
      yPosition = 20
    }

    // Add recommendations
    pdf.setFontSize(16)
    pdf.setTextColor(31, 41, 51) // Dark text
    pdf.text("Recommendations", 20, yPosition)

    yPosition += 10

    // Add each recommendation
    analysisData.recommendations.forEach((rec) => {
      pdf.setFontSize(14)
      pdf.setTextColor(31, 41, 51) // Dark text
      pdf.text(rec.type, 25, yPosition)

      pdf.setFontSize(14)
      pdf.setTextColor(217, 154, 65) // Primary color
      pdf.text(rec.product, 80, yPosition)

      yPosition += 7

      pdf.setFontSize(12)
      pdf.setTextColor(97, 110, 124) // Secondary color
      pdf.text(rec.reason, 25, yPosition)

      yPosition += 12
    })

    // Add footer
    pdf.setFontSize(10)
    pdf.setTextColor(150, 150, 150)
    pdf.text(
      "This report is generated by AI Skin Analyzer and is for informational purposes only.",
      pageWidth / 2,
      pageHeight - 10,
      { align: "center" },
    )

    // Download the PDF
    pdf.save(`${userName.replace(/\s+/g, "_")}_skin_analysis_report.pdf`)
  } catch (error) {
    console.error("Error generating report:", error)
    throw error
  }
}

